{"version":3,"sources":["utils/WinnerCalculator.js","components/Cell/Cell.js","components/Board/Board.js","components/ResultModal/Result.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["winningMatrix","Cell","props","cellClasses","classNames","cell","winner","canHighlight","cellContentClasses","populated","value","className","onClick","Board","cells","cellValues","map","index","winningCombination","indexOf","cellClicked","id","Result","resultModalClasses","isGameOver","message","onNewGameClicked","Game","useState","setCellValues","xIsNext","setXIsNext","setIsGameOver","numberOfTurnsLeft","setNumberOfTurnsLeft","setWinner","setWinningCombination","cellIndex","isCellEmpty","newCellValues","newNumberOfTurnsLeft","calcResult","winninRanges","i","length","currentValue","firstOption","secondOption","hasResult","undefined","calculateWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b15a068.chunk.js","sourcesContent":["const winningMatrix = {\r\n    0: [[1,2],[3,6],[4,8]],\r\n    1: [[0,2],[4,7]],\r\n    2: [[0,1],[5,8],[4,6]],\r\n    3: [[0,6],[4,5]],\r\n    4: [[2,6],[3,5],[1,7],[0,8]],\r\n    5: [[3,4],[2,8]],\r\n    6: [[7,8],[0,3],[2,4]],\r\n    7: [[6,8],[1,4]],\r\n    8: [[6,7],[2,5],[0,4]]\r\n};\r\n\r\nexport const calculateWinner = (cellValues, numberOfTurnsLeft, cellIndex) => {\r\n    \r\n    const winninRanges = winningMatrix[cellIndex];\r\n\r\n    for(let i = 0; i < winninRanges.length; i++) {\r\n        const currentValue = cellValues[cellIndex];\r\n        const firstOption = cellValues[winninRanges[i][0]];\r\n        const secondOption = cellValues[winninRanges[i][1]];\r\n\r\n        if (currentValue === firstOption && firstOption === secondOption) {\r\n            return {\r\n                hasResult: true,\r\n                winner: currentValue,\r\n                winningCombination: [cellIndex, winninRanges[i][0], winninRanges[i][1]]\r\n            };\r\n        }\r\n    }\r\n\r\n    if (numberOfTurnsLeft === 0) {\r\n        return {\r\n            hasResult: true,\r\n            winner: undefined,\r\n            winningCombination: []\r\n        }\r\n    }\r\n\r\n    return {\r\n        hasResult: false,\r\n        winner: undefined,\r\n        winningCombination: []\r\n    };\r\n};","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport './Cell.css'\r\n\r\nexport const Cell = (props) => {\r\n    const cellClasses = classNames({\r\n        cell: true,\r\n        winner: props.canHighlight\r\n    });\r\n\r\n    const cellContentClasses = classNames({\r\n        'cell-content': true,\r\n        populated: props.value\r\n    });\r\n\r\n    return (\r\n        <button className={cellClasses} onClick={props.onClick}>\r\n            <span className={cellContentClasses}>{props.value}</span>\r\n        </button>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Cell } from '../Cell/Cell'\r\nimport './Board.css'\r\n\r\nexport const Board = (props) => {\r\n\r\n    const cells = props.cellValues.map((value, index) => {\r\n        const canHighlight = props.winningCombination &&\r\n                             props.winningCombination.indexOf(index) >= 0;\r\n        return <Cell \r\n                    key={index} \r\n                    value={value} \r\n                    canHighlight={canHighlight} \r\n                    onClick={() => props.cellClicked(index)}\r\n                />;\r\n    });\r\n    return (\r\n        <div id=\"board\">\r\n            {cells}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport './Result.css'\r\n\r\nexport const Result = (props) => {\r\n    const resultModalClasses = classNames({\r\n        'modal-open': props.isGameOver\r\n    });\r\n\r\n    const message = props.winner ? `Winner is ${props.winner}`: 'It is a tie.';\r\n\r\n    return (\r\n        <div id=\"modal-overlay\" className={resultModalClasses}>\r\n            <div id=\"game-result-modal\">\r\n                <div id=\"result-container\">\r\n                    <div id=\"winner-container\">\r\n                        <span>{message}</span>\r\n                    </div>\r\n                </div>\r\n                <div id=\"new-game-container\">\r\n                    <button id=\"new-game-button\" onClick={props.onNewGameClicked}>Start New Game</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport { calculateWinner } from '../../utils/WinnerCalculator';\r\nimport { Board } from '../Board/Board'\r\nimport { Result } from '../ResultModal/Result';\r\nimport './Game.css'\r\n\r\nexport const Game = () => {\r\n    const [cellValues, setCellValues] = useState(['','','','','','','','','']);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isGameOver, setIsGameOver] = useState(false);\r\n    const [numberOfTurnsLeft, setNumberOfTurnsLeft] = useState(9);\r\n    const [winner, setWinner] = useState();\r\n    const [winningCombination, setWinningCombination] = useState([]);\r\n\r\n    const isCellEmpty = (cellIndex) => cellValues[cellIndex] === '';\r\n\r\n    const restartGame = () => {\r\n        setCellValues(['','','','','','','','','']);\r\n        setXIsNext(true);\r\n        setIsGameOver(false);\r\n        setNumberOfTurnsLeft(9);\r\n        setWinner(undefined);\r\n        setWinningCombination([]);\r\n    }\r\n\r\n    const oncellClicked = (cellIndex) => {\r\n        if (isCellEmpty(cellIndex)) {\r\n\r\n            const newCellValues = [...cellValues];\r\n            newCellValues[cellIndex] = xIsNext ? 'X' : 'O';\r\n\r\n            const newNumberOfTurnsLeft = numberOfTurnsLeft - 1;\r\n\r\n            // Calculate Result\r\n            const calcResult = calculateWinner(newCellValues, newNumberOfTurnsLeft, cellIndex);\r\n\r\n            setCellValues(newCellValues);\r\n            setXIsNext(!xIsNext);\r\n            setIsGameOver(calcResult.hasResult);\r\n            setNumberOfTurnsLeft(newNumberOfTurnsLeft);\r\n            setWinner(calcResult.winner);\r\n            setWinningCombination(calcResult.winningCombination);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"game\">\r\n                <h1>Tic Tac Toe</h1>\r\n                <Board \r\n                    cellValues={cellValues}\r\n                    winningCombination={winningCombination}\r\n                    cellClicked={oncellClicked}\r\n                />\r\n            </div>\r\n            <Result\r\n                isGameOver={isGameOver}\r\n                winner={winner}\r\n                onNewGameClicked={restartGame}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import { Game } from './components/Game/Game';\n\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}